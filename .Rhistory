install_bioc("sva")
library(sva)
library(Biobase)
library(GSE5859Subset)
data(GSE5859Subset)
install.packages("digest")
install.packages(c("Rcpp", "digest"))
install.packages("Rcpp", repo = "https://cloud.r-project.org/" )
install.packages("Rcpp", repo = "https://cloud.r-project.org/")
install.packages("stringi")
install.packages("stringi", repos = "https://cloud.r-project.org/")
install.packages("devtools")
install.packages("rmarkdown")
install.packages("backports")
knitr::opts_chunk$set(echo = TRUE)
bike <- read.csv("BikeData.csv")
View(bike)
females <- bike[bike$gender == 'F', ]
females[1, 9]
daily<- bike$cyc_freq[0:10] == 'Daily'
daily
sum(daily, na.rm=TRUE)  #
daily<- bike$cyc_freq[0:10] == 'Daily'
sum(daily, na.rm=TRUE)  #
knitr::opts_chunk$set(echo = TRUE)
overtimes <- c(10, 2, 6, 12, 14, 15, 15, 24, 15, 25, 3, 12)
mean(overtimes)
sd(overtimes)
summary(overtimes)
knitr::opts_chunk$set(echo = TRUE)
animaldata <- read.csv("AnimalData.csv")
ncol(animaldata)
nrow(subset(animaldata[1:10,],Outcome.Type=="Adoption"))
subset(animaldata,Intake.Type=="Owner Surrender")[1,]$Neutered.Status=="Neutered"
#Find the number of animals that were adopted
table(animaldata$Outcome.Type)
#Pull out only adopted animals
adopted <- animaldata[animaldata$Outcome.Type=="Adoption",]
#Pull out just the days in shelter for the adopted animals
daystoadopt <- adopted$Days.Shelter
#Visualize and describe this variable
hist(daystoadopt)
fivenum(daystoadopt)
mean(daystoadopt)
sd(daystoadopt)
which(animaldata$Days.Shelter==max(daystoadopt))
(max(daysadopt) - mean(daysadopt)) / sd(daysadopy)
hist(daystoadopt)
(max(daystoadopt) - mean(daystoadopt)) / sd(daystoadopt)
knitr::opts_chunk$set(echo = TRUE)
table(animaldata$Animal.Type[animaldata$Age.Intake>0])
hist(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Dog"])
hist(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Cat"])
1-pnorm((13-mean(catweight))/sd(catweight))
catweight <- animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Cat"]
(13-mean(catweight))/sd(catweight)
1-pnorm((13-mean(catweight))/sd(catweight))
knitr::opts_chunk$set(echo = TRUE)
animaldata <- read.csv("AnimalData.csv")
hist(animaldata$Intake.Type)
animaldata <- read.csv("AnimalData.csv")
plot(animaldata$Intake.Type)
knitr::opts_chunk$set(echo = TRUE)
pisaTrain = read.csv("../Data/pisa2009train.csv")
pisaTest = read.csv("../Data/pisa2009test.csv")
nrow(pisaTrain)
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
predTest = predict(lmScore, newdata=pisaTest)
predTest = predict(lmScore, newdata=pisaTest)
install.packages(c("caret", "tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
#############################################################
# Create edx set, validation set, and submission file
#############################################################
# Note: this process could take a couple of minutes
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
head(edx)
head(edx)
head(edx)
head(edx)
load("~/GitHub/Harvard University - Data Science Professional/09 - PH125.9x - Capstone/MovieLens Recommender System Project/ml-10M100K/ratings.dat")
knitr::opts_chunk$set(echo = TRUE)
#############################################################
# Create edx set, validation set, and submission file
#############################################################
# Note: this process could take a couple of minutes
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
setwd("~/GitHub/Harvard University - Data Science Professional/09 - PH125.9x - Capstone/MovieLens Recommender System Project")
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
write.csv(edx, "edx.csv")
write.csv(vadlidation, "validation.csv")
# write.csv(edx, "edx.csv")
write.csv(validation, "validation.csv")
str(edx)
# write.csv(edx, "edx.csv")
# write.csv(validation, "validation.csv")
summary(edx)
str(edx)
summary(edx)
head(edx)
head(edx)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', cache=TRUE)
# Loading Libraries
library(dplyr)
library(kableExtra)
library(tidyr)
library(stringr)
library(forcats)
# Loading Datasets
edx <-read.csv("edx.csv")
validation <- read.csv("validation.csv")
edx <- edx %>%
mutate(movieGenre = fct_explicit_na(genres,
na_level = "(no genres listed)")
) %>%
separate_rows(movieGenre,
sep = "\\|")
edx$date <- as.POSIXct(edx$timestamp, origin="1970-01-01")
edx$date <- as.POSIXct(edx$timestamp, origin="1970-01-01")
# Extract the year and month of rate
edx$yearOfRate <- format(edx$date,"%Y")
edx$monthOfRate <- format(edx$date,"%m")
# Extract the year of release for each movie
edx <- edx %>%
mutate(title = str_trim(title)) %>%
extract(title,
c("titleTemp", "releaseYear"),
regex = "^(.*) \\(([0-9 \\-]*)\\)$",
remove = F) %>%
mutate(releaseYear = if_else(str_length(releaseYear) > 4,
as.integer(str_split(releaseYear, "-",
simplify = T)[1]),
as.integer(releaseYear))
) %>%
mutate(title = if_else(is.na(titleTemp),
title,
titleTemp)
)
head(edx)
head(edx[:, c(userId)])
head(edx %>% select(userId, movieId))
edx <- edx %>%
mutate(genre = fct_explicit_na(genres,
na_level = "(no genres listed)")
) %>%
separate_rows(genre,
sep = "\\|")
edx <- edx %>% select(userId, movieId, raing, title, genre, release, yearOfRate, monthOfRate)
edx <- edx %>% select(userId, movieId, rating, title, genre, release, yearOfRate, monthOfRate)
# Extract the year of release for each movie
edx <- edx %>%
mutate(title = str_trim(title)) %>%
extract(title,
c("titleTemp", "release"),
regex = "^(.*) \\(([0-9 \\-]*)\\)$",
remove = F) %>%
mutate(releaseYear = if_else(str_length(releaseYear) > 4,
as.integer(str_split(releaseYear, "-",
simplify = T)[1]),
as.integer(releaseYear))
) %>%
mutate(title = if_else(is.na(titleTemp),
title,
titleTemp)
) %>%
select(-titleTemp)
############
# Project Title: "MovieLens Recommendation System"
# Author: "Uday Adusumilli"
# Date: "16 Dec, 2021"
############
# Install all needed libraries if it is not present
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(kableExtra)) install.packages("kableExtra")
if(!require(tidyr)) install.packages("tidyr")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(stringr)) install.packages("stringr")
if(!require(forcats)) install.packages("forcats")
if(!require(ggplot2)) install.packages("ggplot2")
# Loading all needed libraries
library(dplyr)
library(tidyverse)
library(kableExtra)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
# The RMSE function that will be used in this project is:
RMSE <- function(true_ratings = NULL, predicted_ratings = NULL) {
sqrt(mean((true_ratings - predicted_ratings)^2))
# The RMSE function that will be used in this project is:
RMSE <- function(true_ratings = NULL, predicted_ratings = NULL) {
sqrt(mean((true_ratings - predicted_ratings)^2))
}
}
# The RMSE function that will be used in this project is:
RMSE <- function(true_ratings = NULL, predicted_ratings = NULL) {
sqrt(mean((true_ratings - predicted_ratings)^2))
}
# Convert timestamp to a human readable date
edx$date <- as.POSIXct(edx$timestamp, origin="1970-01-01")
validation$date <- as.POSIXct(validation$timestamp, origin="1970-01-01")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
##
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(kableExtra)) install.packages("kableExtra")
if(!require(tidyr)) install.packages("tidyr")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(stringr)) install.packages("stringr")
if(!require(forcats)) install.packages("forcats")
if(!require(ggplot2)) install.packages("ggplot2")
library(dplyr)
library(tidyverse)
library(kableExtra)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
RMSE <- function(true_ratings = NULL, predicted_ratings = NULL) {
sqrt(mean((true_ratings - predicted_ratings)^2))
}
edx$date <- as.POSIXct(edx$timestamp, origin="1970-01-01")
validation$date <- as.POSIXct(validation$timestamp, origin="1970-01-01")
edx$yearOfRate <- format(edx$date,"%Y")
edx$monthOfRate <- format(edx$date,"%m")
validation$yearOfRate <- format(validation$date,"%Y")
validation$monthOfRate <- format(validation$date,"%m")
edx <- edx %>%
mutate(title = str_trim(title)) %>%
extract(title,
c("titleTemp", "release"),
regex = "^(.*) \\(([0-9 \\-]*)\\)$",
remove = F) %>%
mutate(release = if_else(str_length(release) > 4,
as.integer(str_split(release, "-",
simplify = T)[1]),
as.integer(release))
) %>%
mutate(title = if_else(is.na(titleTemp),
title,
titleTemp)
) %>%
select(-titleTemp)
validation <- validation %>%
mutate(title = str_trim(title)) %>%
extract(title,
c("titleTemp", "release"),
regex = "^(.*) \\(([0-9 \\-]*)\\)$",
remove = F) %>%
mutate(release = if_else(str_length(release) > 4,
as.integer(str_split(release, "-",
simplify = T)[1]),
as.integer(release))
) %>%
mutate(title = if_else(is.na(titleTemp),
title,
titleTemp)
) %>%
select(-titleTemp)
edx <- edx %>%
mutate(genre = fct_explicit_na(genres,
na_level = "(no genres listed)")
) %>%
separate_rows(genre,
sep = "\\|")
validation <- validation %>%
mutate(genre = fct_explicit_na(genres,
na_level = "(no genres listed)")
) %>%
separate_rows(genre,
sep = "\\|")
edx <- edx %>% select(userId, movieId, rating, title, genre, release, yearOfRate, monthOfRate)
validation <- validation %>% select(userId, movieId, rating, title, genre, release, yearOfRate, monthOfRate)
edx$yearOfRate <- as.numeric(edx$yearOfRate)
edx$monthOfRate <- as.numeric(edx$monthOfRate)
edx$release <- as.numeric(edx$release)
validation$yearOfRate <- as.numeric(validation$yearOfRate)
validation$monthOfRate <- as.numeric(validation$monthOfRate)
validation$release <- as.numeric(validation$release)
mu_hat <- mean(edx$rating)
rmse_mean_model_result <- RMSE(validation$rating, mu_hat)
results <- data.frame(model="Naive Mean-Baseline Model", RMSE=rmse_mean_model_result)
movie_avgs <- edx %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu_hat))
rmse_movie_model <- validation %>%
left_join(movie_avgs, by='movieId') %>%
mutate(pred = mu_hat + b_i) %>%
pull(pred)
rmse_movie_model_result <- RMSE(validation$rating, rmse_movie_model)
results <- results %>% add_row(model="Movie-Based Model", RMSE=rmse_movie_model_result)
user_avgs <- edx %>%
left_join(movie_avgs, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu_hat - b_i))
rmse_movie_user_model <- validation %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu_hat + b_i + b_u) %>%
pull(pred)
rmse_movie_user_model_result <- RMSE(validation$rating, rmse_movie_user_model)
results <- results %>% add_row(model="Movie+User Based Model", RMSE=rmse_movie_user_model_result)
genre_pop <- edx %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
group_by(genre) %>%
summarize(b_u_g = mean(rating - mu_hat - b_i - b_u))
rmse_movie_user_genre_model <- validation %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
left_join(genre_pop, by='genre') %>%
mutate(pred = mu_hat + b_i + b_u + b_u_g) %>%
pull(pred)
rmse_movie_user_genre_model_result <- RMSE(validation$rating, rmse_movie_user_genre_model)
results <- results %>% add_row(model="Movie+User+Genre Based Model", RMSE=rmse_movie_user_genre_model_result)
lambdas <- seq(0, 10, 0.1)
rmses <- sapply(lambdas, function(lambda) {
# Calculate the average by user
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu_hat) / (n() + lambda))
# Compute the predicted ratings on validation dataset
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
mutate(pred = mu_hat + b_i) %>%
pull(pred)
# Predict the RMSE on the validation set
return(RMSE(validation$rating, predicted_ratings))
})
# Get the lambda value that minimize the RMSE
min_lambda <- lambdas[which.min(rmses)]
# Predict the RMSE on the validation set
rmse_regularized_movie_model <- min(rmses)
# Adding the results to the results dataset
results <- results %>% add_row(model="Regularized Movie-Based Model", RMSE=rmse_regularized_movie_model)
rmses <- sapply(lambdas, function(lambda) {
# Calculate the average by user
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu_hat) / (n() + lambda))
# Calculate the average by user
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu_hat) / (n() + lambda))
# Compute the predicted ratings on validation dataset
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
mutate(pred = mu_hat + b_i + b_u) %>%
pull(pred)
# Predict the RMSE on the validation set
return(RMSE(validation$rating, predicted_ratings))
})
min_lambda <- lambdas[which.min(rmses)]
# Predict the RMSE on the validation set
rmse_regularized_movie_user_model <- min(rmses)
# Adding the results to the results dataset
results <- results %>% add_row(model="Regularized Movie+User Based Model", RMSE=rmse_regularized_movie_user_model)
lambdas <- seq(0, 15, 0.1)
rmses <- sapply(lambdas, function(lambda) {
# Calculate the average by user
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu_hat) / (n() + lambda))
# Calculate the average by user
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu_hat) / (n() + lambda))
b_u_g <- edx %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
group_by(genre) %>%
summarize(b_u_g = sum(rating - b_i - mu_hat - b_u) / (n() + lambda))
# Compute the predicted ratings on validation dataset
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
left_join(b_u_g, by='genre') %>%
mutate(pred = mu_hat + b_i + b_u + b_u_g) %>%
pull(pred)
# Predict the RMSE on the validation set
return(RMSE(validation$rating, predicted_ratings))
})
min_lambda <- lambdas[which.min(rmses)]
rmse_regularized_movie_user_genre_model <- min(rmses)
results <- results %>% add_row(model="Regularized Movie+User+Genre Based Model", RMSE=rmse_regularized_movie_user_genre_model)
results
---
title: "MovieLens Recommendation System - Code"
author: "Uday Adusumilli"
date: "16 Dec, 2021"
output:
pdf_document:
toc: true
toc_depth: 2
number_sections: true
highlight: pygments
keep_tex: true
html_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', cache=FALSE, cache.lazy = FALSE)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', cache=FALSE, cache.lazy = FALSE)
```{r}
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(kableExtra)) install.packages("kableExtra")
if(!require(tidyr)) install.packages("tidyr")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(stringr)) install.packages("stringr")
if(!require(forcats)) install.packages("forcats")
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(kableExtra)) install.packages("kableExtra")
if(!require(tidyr)) install.packages("tidyr")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(stringr)) install.packages("stringr")
if(!require(forcats)) install.packages("forcats")
if(!require(ggplot2)) install.packages("ggplot2")
